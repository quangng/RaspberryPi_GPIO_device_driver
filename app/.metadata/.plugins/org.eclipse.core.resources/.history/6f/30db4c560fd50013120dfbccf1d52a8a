/*
 ============================================================================
 Name        : c.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

/*!
 * @file rampleds.c
 *
 * @brief Output Test
 *
 * @author Blake Bourque
 *
 * @date 4/8/13
 *
 * Lights up led bar in order
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/ioctl.h>


#include "modgpio.h"

#define NUM_PINS 17
static int pins[NUM_PINS] = {
		2,
		3,
		4,
		7,
		8,
		9,
		10,
		11,
		14,
		15,
		17,
		18,
		22,
		23,
		24,
		25,
		27,
};

/*!
 * \brief Toggles pins to make a nice effect
 *
 * Opens gpio file descriptor, reserves pins, sets as output,
 * sets all off, toggle on, toggle off
 *
 * \param[in] argc unused
 * \param[in] argv unused
 *
 * \returns 0 unless an error occurs
 */
int main(int argc, char * argv[])
{
	int i;
	int fd;
	int ret;
	int t;
	int val;
	struct gpio_data_mode mydmstruct;

	fd = open("/dev/rpigpio", O_RDONLY); ///hmm, if read only howcome write works?
	if (!fd) {
		perror("open(O_RDONLY)");
		return errno;
	}
	//reserve pins
	for (i=0; i<NUM_PINS; i++) {
		t=pins[i];
		ret = ioctl(fd, GPIO_REQUEST, &t);
		if (ret < 0)
			perror("ioctl");
		else
			printf("Reserved pin %d\n", t);
	}
	//set input
	for (i=0; i<NUM_PINS; i++) {
		t=pins[i];
		mydmstruct.pin = t;
		mydmstruct.data = MODE_INPUT;

		ret = ioctl(fd, GPIO_MODE, &mydmstruct);
		if (ret < 0)
			perror("ioctl");
		else
			printf("Set pin %d as OUTPUT\n", t);
	}
	
	// read gpio pin state
	for (i=0; i<NUM_PINS; i++) {
		t = pins[i];
		val = t;
		/*

pin = v;
ret = ioctl(fd, GPIO_READ, &pin);
if (ret < 0) {
perror("ioctl");
}
printf("Pin %d value=%d\n", v, pin);
}
		 */


		ret = ioctl(fd, GPIO_READ, &val);
		if (ret < 0)
			perror("ioctl");
		else
			printf("Pin %d value=%d\n", t, val);
	}

	sleep(1);

	return 0;
}
