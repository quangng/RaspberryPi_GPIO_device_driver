/*
 ============================================================================
 Name        : collision_test.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/wait.h>

#include "modgpio.h"

#define NUM_PINS 21
static int pin_arr[NUM_PINS] = {
		2,
		3,
		4,
		7,
		8,
		9,
		10,
		11,
		14,
		15,
		17,
		18,
		22,
		23,
		24,
		25,
		27,
		28,
		29,
		30,
		31,
};

struct gpio_data_mode modeData;

void forkChildren(int nChildren, int fd);
void child(int fd);

int main(int argc, char *argv[])
{
	int fd, status=0;
	pid_t wpid;

	fd = open("/dev/rpigpio", O_RDONLY); ///hmm, if read only howcome write works?
	if (!fd) {
		perror("open(O_RDONLY)");
		return errno;
	}
	printf("Parent pid: %d", getpid());
	forkChildren(10, fd);
	while ((wpid = wait(&status)) > 0) {
		printf("Exit status of %d was %d (%s)\n", (int)wpid, status, (status > 0) ? "accept" : "reject");
	}
	close(fd);
	return 0;
}

void forkChildren(int nChildren, int fd)
{
	int i;
	pid_t pid;

	for (i = 1; i <= nChildren; i++) {
		pid = fork();
		if (pid == 0) {
			child(fd);
			break;
		}
	}
}

void child(int fd)
{
	int i, t, ret, j;

	//reserve pin_arr
	for (i=0; i<NUM_PINS; i++) {
		t=pin_arr[i];
		ret = ioctl(fd, GPIO_REQUEST, &t);
		if (ret < 0)
			perror("ioctl request");
		else
			printf("Reserved pin %d\n", t);
	}
	//set as output
	for (i=0; i<NUM_PINS; i++) {
		t=pin_arr[i];
		modeData.pin = t;
		modeData.data = MODE_OUTPUT;

		ret = ioctl(fd, GPIO_MODE, &modeData);
		if (ret < 0)
			perror("ioctl set output");
		else
			printf("Set pin %d as OUTPUT\n", t);
	}
	for (j=0; j<10; j++) {
		//toggle pins
		for (i=0; i<NUM_PINS; i++) {
			t=pin_arr[i];
			ret = ioctl(fd, GPIO_TOGGLE, &t);
			if (ret < 0)
				perror("ioctl toggle");
			else
				printf("Client %d toggled pin %d to %d\n", getpid(), pin_arr[i], t);
		}

		sleep(1);
	}
	exit(0);
}
